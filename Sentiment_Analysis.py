# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ut0jR2BKKS49ID7htpNX9UUD9GJg33Ju
"""

pip install vaderSentiment

#importing libraries
import pandas as pd
import numpy as np
from textblob import TextBlob
import re
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , classification_report
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

#load the data
from google.colab import files
files.upload()

#store data into variables
df1 = pd.read_csv('Combined_News_DJIA.csv')
df2 = pd.read_csv('datasets-129-792900-upload_DJIA_table.csv')

#show the first three rows of data
df1.head(3)

#get the number of rows and columns
df1.shape

#print first 3 rows data for df2
df2.head(3)

#Get the number of rows and columns foe df2
df2.shape

#Merge the dataset on the data feild 
merge = df1.merge(df2, how='inner', on='Date', left_index=True)

#Show the merged data set
merge.head(3)

#Combine the top news headlines
headlines = []
for row in range(0, len(merge.index)):
  headlines.append(' '.join(str(x) for x in merge.iloc[row, 2:27]))

#print a sample of the combined headlines
headlines[0]

#Clean the data
clean_headlines = []
for i in range(0, len(headlines)):
  clean_headlines.append(re.sub("b[(')]", '', headlines[i])) #removes b'
  clean_headlines[i] = re.sub('b[(")]' , '', clean_headlines[i])  #removes b"
  clean_headlines[i] = re.sub("/'", '', clean_headlines[i]) # removes /'

#Print clean dataset
clean_headlines[0]

#Add clean headlines 
merge['Combined_News'] = clean_headlines
#show the new columns
merge['Combined_News'][0]

# print first three rows of merge
merge.head(3)

# Create a fxn to get the subjectivity
def getSubjectivity(text):
  return TextBlob(text).sentiment.subjectivity

# Create a fxn to get polarity
def getPolarity(text):
  return TextBlob(text).sentiment.polarity

#Create tow new columns Subjectivity and Polarity
merge['Subjectivity'] = merge['Combined_News'].apply(getSubjectivity)
merge['Polarity'] = merge['Combined_News'].apply(getPolarity)

#Show the new cloumns in merge dataset
merge.head(3)

# Create a fxn to calculate sentiment score
def getSIA(text):
  sia = SentimentIntensityAnalyzer()
  sentiment = sia.polarity_scores(text)
  return sentiment

compound = []
neg =[]
pos = []
neu=[]
SIA=0
for i in range(0, len(merge['Combined_News'])):
  SIA = getSIA(merge['Combined_News'][i])
  compound.append(SIA['compound'])
  neg.append(SIA['neg'])
  neu.append(SIA['neu'])
  pos.append(SIA['pos'])

# store the sentiment scores in merge data set
merge['Compound']= compound
merge['Negative'] = neg
merge['Neutral'] = neu
merge['Positive'] = pos

#show the merge data
merge.head(3)

# Create a list of columns to keep
keep_columns = ['Open','Low','High', 'Volume', 'Subjectivity','Polarity', 'Compound', 'Negative', 'Neutral', 'Positive', 'Label']
df = merge[keep_columns]
df

# Create the feature data set
X= df
X= np.array(X.drop(['Label'],1))
# Create the target data set
y = np.array(df['Label'])

#Split the data into 80% training and 20% testing Data sets
x_train, x_test , y_train , y_test = train_test_split(X,y, test_size = 0.2 , random_state=0)

# Create and train the model
model = LinearDiscriminantAnalysis().fit(x_train, y_train)

# Show the model predictions
predictions = model.predict(x_test)
predictions

y_test

# Show the model metrics
print(classification_report(y_test , predictions))
